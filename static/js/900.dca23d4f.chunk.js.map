{"version":3,"file":"static/js/900.dca23d4f.chunk.js","mappings":"8SAEMA,EAAU,gCACVC,EAAU,mCAEHC,EAAgB,mCAAG,2GAAOC,EAAP,+BAAc,EACtCC,EADwB,UACfJ,EADe,iCACiBC,EADjB,gCACgDE,GADhD,SAEPE,EAAAA,EAAAA,IAAUD,GAFH,cAExBE,EAFwB,yBAGvBA,EAASC,MAHc,2CAAH,qDAMhBC,EAAe,mCAAG,WAAMC,GAAN,gFACvBL,EADuB,UACdJ,EADc,iBACES,EADF,oBACsBR,EADtB,4BAENI,EAAAA,EAAAA,IAAUD,GAFJ,cAEvBE,EAFuB,yBAGtBA,EAASC,MAHa,2CAAH,sDAMfG,EAAe,mCAAG,WAAMD,GAAN,gFACvBL,EADuB,UACdJ,EADc,iBACES,EADF,4BAC8BR,EAD9B,mCAENI,EAAAA,EAAAA,IAAUD,GAFJ,cAEvBE,EAFuB,yBAGtBA,EAASC,KAAKI,SAHQ,2CAAH,sDAMfC,EAAY,mCAAG,WAAMH,GAAN,gFACpBL,EADoB,UACXJ,EADW,iBACKS,EADL,4BACiCR,EADjC,4BAEHI,EAAAA,EAAAA,IAAUD,GAFP,cAEpBE,EAFoB,yBAGnBA,EAASC,KAAKM,MAHK,2CAAH,sDAMZC,EAAc,mCAAG,WAAMC,GAAN,gFACtBX,EADsB,UACbJ,EADa,iCACmBC,EADnB,iCACmDc,EADnD,wCAELV,EAAAA,EAAAA,IAAUD,GAFL,cAEtBE,EAFsB,yBAGrBA,EAASC,KAAKI,SAHO,2CAAH,qD,sIC5B3B,EAAuB,mBAAvB,EAAoD,sBAApD,EAAqF,uB,kBC4CrF,EAvCa,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACNP,GAAaQ,EAAAA,EAAAA,MAAbR,SACR,GAAkCS,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,qGACDV,EAAAA,EAAAA,IAAaH,GADZ,OACdF,EADc,OAEpBa,EAAab,GAFO,2CAAH,qDAInBe,GACD,GAAE,CAACb,EAAUO,KAGZ,wBACGG,EAAUI,KAAI,SAAAV,GAAI,OACjB,gBAAIW,UAAWC,EAAf,UACGZ,EAAKa,cACJ,gBACEF,UAAWC,EACXE,IAAG,yCAAoCd,EAAKa,cAC5CE,IAAG,UAAKf,EAAKgB,KAAV,eAGL,gBACEL,UAAWC,EACXE,IAAI,yHACJC,IAAI,qBAGR,gBAAIJ,UAAWC,EAAf,WACE,8BAAMZ,EAAKgB,KAAX,QACA,uCAAehB,EAAKiB,mBAhBMC,EAAAA,EAAAA,MADb,KAuBxB,C,uDC1CM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Api.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '0642b3e039f9cde93a3a88c569e802eb';\n\nexport const getPopularMovies = async (page = 1) => {\n  const url = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const getMovieDetails = async moviesId => {\n  const url = `${API_URL}movie/${moviesId}?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const getMovieReviews = async moviesId => {\n  const url = `${API_URL}movie/${moviesId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n\nexport const getMovieCast = async moviesId => {\n  const url = `${API_URL}movie/${moviesId}/credits?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url);\n  return response.data.cast;\n};\n\nexport const getMovieSearch = async query => {\n  const url = `${API_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__m5y0R\",\"castImg\":\"Cast_castImg__T4WbF\",\"castName\":\"Cast_castName__-i08u\"};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport css from './Cast.module.css';\nimport { getMovieCast } from 'components/Api';\n\nconst Cast = ({ ApiKey }) => {\n  const { moviesId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    const handleGetCast = async () => {\n      const data = await getMovieCast(moviesId);\n      setMovieCast(data);\n    };\n    handleGetCast();\n  }, [moviesId, ApiKey]);\n\n  return (\n    <ul>\n      {movieCast.map(cast => (\n        <li className={css.cast} key={nanoid()}>\n          {cast.profile_path ? (\n            <img\n              className={css.castImg}\n              src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n              alt={`${cast.name} profile`}\n            />\n          ) : (\n            <img\n              className={css.castImg}\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1000px-No-Image-Placeholder.svg.png\"\n              alt=\"Default profile\"\n            />\n          )}\n          <ul className={css.castName}>\n            <li> {cast.name} </li>\n            <p>Character: {cast.character}</p>\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_URL","API_KEY","getPopularMovies","page","url","axios","response","data","getMovieDetails","moviesId","getMovieReviews","results","getMovieCast","cast","getMovieSearch","query","ApiKey","useParams","useState","movieCast","setMovieCast","useEffect","handleGetCast","map","className","css","profile_path","src","alt","name","character","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}