{"version":3,"file":"static/js/900.5ce2485f.chunk.js","mappings":"sPACA,EAAuB,mBAAvB,EAAoD,sBAApD,EAAqF,uB,kBC4CrF,EAvCa,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACNC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,qGACDC,EAAAA,EAAAA,IAAaP,GADZ,OACdQ,EADc,OAEpBJ,EAAaI,GAFO,2CAAH,qDAInBF,GACD,GAAE,CAACN,EAAUD,KAGZ,wBACGI,EAAUM,KAAI,SAAAC,GAAI,OACjB,gBAAIC,UAAWC,EAAf,UACGF,EAAKG,cACJ,gBACEF,UAAWC,EACXE,IAAG,yCAAoCJ,EAAKG,cAC5CE,IAAG,UAAKL,EAAKM,KAAV,eAGL,gBACEL,UAAWC,EACXE,IAAI,yHACJC,IAAI,qBAGR,gBAAIJ,UAAWC,EAAf,WACE,8BAAMF,EAAKM,KAAX,QACA,uCAAeN,EAAKO,mBAhBMC,EAAAA,EAAAA,MADb,KAuBxB,C,uDC1CM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__m5y0R\",\"castImg\":\"Cast_castImg__T4WbF\",\"castName\":\"Cast_castName__-i08u\"};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport css from './Cast.module.css';\nimport { getMovieCast } from 'components/App';\n\nconst Cast = ({ ApiKey }) => {\n  const { moviesId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    const handleGetCast = async () => {\n      const data = await getMovieCast(moviesId);\n      setMovieCast(data);\n    };\n    handleGetCast();\n  }, [moviesId, ApiKey]);\n\n  return (\n    <ul>\n      {movieCast.map(cast => (\n        <li className={css.cast} key={nanoid()}>\n          {cast.profile_path ? (\n            <img\n              className={css.castImg}\n              src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n              alt={`${cast.name} profile`}\n            />\n          ) : (\n            <img\n              className={css.castImg}\n              src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1000px-No-Image-Placeholder.svg.png\"\n              alt=\"Default profile\"\n            />\n          )}\n          <ul className={css.castName}>\n            <li> {cast.name} </li>\n            <p>Character: {cast.character}</p>\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ApiKey","moviesId","useParams","useState","movieCast","setMovieCast","useEffect","handleGetCast","getMovieCast","data","map","cast","className","css","profile_path","src","alt","name","character","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}